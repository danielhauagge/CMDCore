// Copyright (C) 2011 by Daniel Hauagge
//
// Permission is hereby granted, free  of charge, to any person obtaining
// a  copy  of this  software  and  associated  documentation files  (the
// "Software"), to  deal in  the Software without  restriction, including
// without limitation  the rights to  use, copy, modify,  merge, publish,
// distribute,  sublicense, and/or sell  copies of  the Software,  and to
// permit persons to whom the Software  is furnished to do so, subject to
// the following conditions:
//
// The  above  copyright  notice  and  this permission  notice  shall  be
// included in all copies or substantial portions of the Software.
//
// THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
// EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
// MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#ifndef __LOGGER__
#define __LOGGER__

#include "cmdcore"
#include "timer"

CMDC_NAMESPACE_BEGIN

typedef enum { LOGLEVEL_ERROR = 3, LOGLEVEL_WARN = 2, LOGLEVEL_INFO = 1, LOGLEVEL_DEBUG = 0 } LogLevel;

class Logger
{
public:
    static void init();
    static void deinit();

    static Logger* getInstance() {
        assert(s_inst != NULL);
        s_inst;
    }

public:
    Logger();

    std::ostream& setMessage() {
        m_msg.str("");
        return m_msg;
    }

    void printMessage(LogLevel loglevel,
                      const std::string& moduleName,
                      const std::string& filename,
                      const std::string& function,
                      int lineNumber) const;

    std::ostream& startProgressBar(LogLevel logLevel);
    void updateProgressBar(int curr, int total,
                           const std::string& moduleName, const std::string& filename,
                           const std::string& function, int lineNumber);

private:
    static Logger* s_inst;
    static LogLevel s_minLogLevelPrint, s_minLogLevelError;

    std::stringstream m_msg;

    std::string m_moduleName;
    std::string m_filename;
    std::string m_function;
    int m_lineNumber;
    LogLevel m_logLevel;

    int m_progBarWidth;
    bool m_progbarDone;
    int m_ticks;
    Timer m_timer;
    int m_prevBarFill;
    double m_timePrevUpdate;
};

// #define LOG_MSG(level, msg) { \
//         Logger logger(level, __FILE__, __LINE__); \
//         logger << msg; \
//         logger.printMsg(); \
//     }

// #define LOG_ERROR(msg) LOG_MSG(LOGLEVEL_ERROR, msg)
// #define LOG_WARN(msg)  LOG_MSG(LOGLEVEL_WARN, msg)
// #define LOG_INFO(msg)  LOG_MSG(LOGLEVEL_INFO, msg)
// #define LOG_DEBUG(msg) LOG_MSG(LOGLEVEL_DEBUG, msg)
// #define LOG_EXPR(msg)  LOG_DEBUG(#msg << " = " << (msg))

CMDC_NAMESPACE_END

#endif // __LOGGER__