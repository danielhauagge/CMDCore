// Copyright (C) 2011 by Daniel Hauagge
//
// Permission is hereby granted, free  of charge, to any person obtaining
// a  copy  of this  software  and  associated  documentation files  (the
// "Software"), to  deal in  the Software without  restriction, including
// without limitation  the rights to  use, copy, modify,  merge, publish,
// distribute,  sublicense, and/or sell  copies of  the Software,  and to
// permit persons to whom the Software  is furnished to do so, subject to
// the following conditions:
//
// The  above  copyright  notice  and  this permission  notice  shall  be
// included in all copies or substantial portions of the Software.
//
// THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
// EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
// MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#ifndef __OPTION_PARSER__
#define __OPTION_PARSER__

#include "cmdcore"

CMDC_NAMESPACE_BEGIN

class OptionParser
{
public:
    class UnrecognizedOptionError: public std::exception
    {
    public:
        UnrecognizedOptionError(const std::string& opt) {
            strncpy(message, &opt[0], 1024);
        }
        char message[1024];
    };

    /// String with extra methods to convert it to int, double, or bool
    class ConvertibleString : public std::string
    {
    public:
        ConvertibleString();
        ConvertibleString(const std::string& other);
        ConvertibleString(const char* other);

        ConvertibleString& operator=(const std::string& other);
        ConvertibleString& operator=(const char* other);

        int asInt() const;
        double asFloat() const;
        bool asBool() const;
    };

    typedef std::map<std::string, ConvertibleString> Options;
    typedef std::vector<ConvertibleString> Arguments;


    OptionParser(Arguments* args, Options* opts);

    void parse(int argc, const char* argv[]);

    void setNArguments(int minArgs = 0, int maxArgs = 10000);

    void addUsage(const std::string& usage) {
        _usage.push_back(usage);
    }

    void addCopyright(const std::string& copyright) {
        _copyright = copyright;
    }

    void addDescription(const std::string& description) {
        _description = description;
    }

    void addSection(const std::string& section);
    void addOption(const std::string& dest,
                   const std::string& shortFlag,
                   const std::string& metavar,
                   const std::string& longFlag = std::string(""),
                   const std::string& description = std::string(""),
                   const std::string& defaultValue = std::string(""));

    void addFlag(const std::string& dest,
                 const std::string& shortFlag,
                 const std::string& longFlag = std::string(""),
                 const std::string& description = std::string(""),
                 bool valueWhenSet = true,
                 bool defaultValue = false);

    void printHelp() const;

private:
    int _minArgs, _maxArgs;

    Arguments* _args;
    Options* _opts;

    std::vector<std::string>  _usage;
    std::string _description, _progName, _copyright;
    std::map<std::string, std::string>  _flag2dest, _dest2flag;

    // Marks option as flags (so we dont require user to supply value for them)
    std::set<std::string> _boolFlags;

    // Maps short and long flags to target value (specified by the valueWhenSet option to addFlag)
    std::map<std::string, std::string>  _optionFlag2value;

    std::stringstream _flagHelp;
};

CMDC_NAMESPACE_END

#endif // __OPTION_PARSER__
